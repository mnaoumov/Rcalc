
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("accuracy", TRUE)))
> source("PowerFunctions.R")
Loading required package: miscTools
> 
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
>  
> 
> 
> u = (7 : 14) / 10
> M = 30
> 
> b = 5
> k = 3
> 
> #accuracy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
> 
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.15733 0.10763 0.06567 0.03413 0.01714 0.00987 0.00382 0.00081
F   0.14790 0.09530 0.06100 0.03900 0.02510 0.01630 0.01070 0.00710
QMC 0.34595 0.27938 0.20768 0.15173 0.11492 0.08618 0.05634 0.03876
Q   0.29380 0.20190 0.13200 0.08210 0.04860 0.02730 0.01460 0.00740
L   0.37271 0.28480 0.20547 0.14160 0.10410 0.06336 0.04192 0.03119
LR  0.37250 0.28100 0.20710 0.14070 0.09760 0.07510 0.00000 0.00000
NC  0.36820 0.27620 0.20200 0.13670 0.09370 0.07000 0.00000 0.00000
> 
> 
> b = 10
> k = 4
> 
> #accuracy normal
> A = generateRandomMatrix(rnorm, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00637 0.00164 0.00036 0.00004 0.00001 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20780 0.12191 0.06564 0.03365 0.01569 0.00718 0.00342 0.00139
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21930 0.12451 0.06350 0.02912 0.01202 0.00468 0.00153 0.00049
LR  0.21720 0.12070 0.06210 0.02790 0.01170 0.00450 0.00170 0.00060
NC  0.21540 0.11940 0.06120 0.02740 0.01150 0.00440 0.00160 0.00050
>   
> 
> #accuarcy unif
> A = generateRandomMatrix(runif, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
         [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC 0.0079200 0.0019100 0.00049000 0.00012000 0.00001000 0.000000000
F   0.0076000 0.0020000 0.00050000 0.00010000 0.00000000 0.000000000
QMC 0.2062000 0.1217200 0.06623000 0.03485000 0.01775000 0.008580000
Q   0.1793000 0.0937000 0.04400000 0.01860000 0.00700000 0.002400000
L   0.2133743 0.1200824 0.06067121 0.02854057 0.01208024 0.004950099
LR  0.2139000 0.1204000 0.06100000 0.02820000 0.01190000 0.004800000
NC  0.2124000 0.1191000 0.06020000 0.02770000 0.01160000 0.004700000
           [,7]         [,8]
FMC 0.000000000 0.0000000000
F   0.000000000 0.0000000000
QMC 0.004030000 0.0016500000
Q   0.000700000 0.0002000000
L   0.001660033 0.0005400108
LR  0.001800000 0.0006000000
NC  0.001700000 0.0006000000
>  
> 
> #accuarcy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00812 0.00240 0.00065 0.00021 0.00008 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20769 0.12110 0.06672 0.03536 0.01764 0.00881 0.00453 0.00215
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21947 0.12436 0.06362 0.02990 0.01293 0.00494 0.00155 0.00055
LR  0.20180 0.12600 0.06240 0.02880 0.01320 0.00520 0.00180 0.00060
NC  0.20120 0.12410 0.06140 0.02830 0.01280 0.00500 0.00180 0.00060
>  
> #accuracy exp squared
> A = generateRandomMatrix(rexp2, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00529 0.00091 0.00019 0.00002 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20509 0.11640 0.06188 0.03018 0.01414 0.00599 0.00245 0.00080
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.22134 0.12380 0.06368 0.02918 0.01277 0.00477 0.00145 0.00045
LR  0.22110 0.12060 0.06230 0.02910 0.01240 0.00490 0.00180 0.00060
NC  0.21890 0.11930 0.06130 0.02850 0.01210 0.00480 0.00170 0.00050
>  
> 
> #accuracy gamma5
> A = generateRandomMatrix(rgamma5, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00595 0.00143 0.00039 0.00007 0.00001 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.19775 0.10953 0.05704 0.02892 0.01405 0.00660 0.00310 0.00130
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.23154 0.12735 0.06467 0.03045 0.01265 0.00467 0.00173 0.00057
LR  0.25150 0.13120 0.06420 0.03430 0.01570 0.00690 0.00300 0.00090
NC  0.24520 0.12880 0.06300 0.03300 0.01490 0.00640 0.00270 0.00080
>  
> #accuracy gamma05
> A = generateRandomMatrix(rgamma05, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00017 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.15022 0.06341 0.02264 0.00685 0.00143 0.00021 0.00003 0.00000
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.28788 0.16169 0.08283 0.03928 0.01696 0.00652 0.00214 0.00075
LR  0.37090 0.41890 0.23710 0.13010 0.06090 0.00010 0.00000 0.00000
NC  0.33310 0.30800 0.17600 0.09520 0.04470 0.00000 0.00000 0.00000
>  
> 
