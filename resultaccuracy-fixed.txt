
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("accuracy-fixed", TRUE)))
> source("PowerFunctions-fixed.R")
Loading required package: miscTools
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
>  
> 
> iterations = 100000 
> u = (0 : 14) / 10
> M = 30
> 
> b = 5
> k = 3
> 
> #accuracy exp2
> A = generateRandomMatrix(rexp2, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rexp2, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: Lambda -> maxNR -> maxNRCompute
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9894 0.9521 0.8982 0.8045 0.6608 0.4859 0.3345 0.2120 0.1368 0.0866
F      1 0.9754 0.9060 0.8034 0.6830 0.5595 0.4441 0.3435 0.2603 0.1943 0.1434
QMC    1 0.9894 0.9521 0.8982 0.8045 0.6608 0.4859 0.3345 0.2120 0.1368 0.0866
Q      1 0.9753 0.9048 0.7985 0.6703 0.5353 0.4066 0.2938 0.2019 0.1320 0.0821
L      1 0.9904 0.9521 0.8706 0.7657 0.6608 0.5319 0.4341 0.2943 0.2316 0.1459
LR     0 0.9825 0.9036 0.8316 0.7292 0.6604 0.5152 0.4258 0.2865 0.2510 0.1444
NC     0 0.9820 0.9036 0.8301 0.7260 0.6488 0.5073 0.4140 0.2811 0.2385 0.1399
     [,12]  [,13]  [,14]  [,15]
FMC 0.0589 0.0378 0.0236 0.0161
F   0.1051 0.0767 0.0559 0.0408
QMC 0.0589 0.0378 0.0236 0.0161
Q   0.0486 0.0273 0.0146 0.0074
L   0.0925 0.0721 0.0501 0.0279
LR  0.0810 0.0689 0.0481 0.0207
NC  0.0792 0.0649 0.0442 0.0197
> 
> 
> 
> #accuracy exp
> A = generateRandomMatrix(rexp, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rexp, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9818 0.9258 0.8287 0.7128 0.5814 0.4561 0.3478 0.2564 0.1821 0.1275
F      1 0.9754 0.9060 0.8034 0.6830 0.5595 0.4441 0.3435 0.2603 0.1943 0.1434
QMC    1 0.9818 0.9258 0.8287 0.7128 0.5814 0.4561 0.3478 0.2564 0.1821 0.1275
Q      1 0.9753 0.9048 0.7985 0.6703 0.5353 0.4066 0.2938 0.2019 0.1320 0.0821
L      1 0.9891 0.9332 0.8575 0.7679 0.6780 0.5718 0.4152 0.3253 0.2228 0.1418
LR     0 0.9805 0.9209 0.8357 0.7411 0.6317 0.5365 0.4017 0.3031 0.2164 0.1485
NC     0 0.9802 0.9202 0.8338 0.7364 0.6248 0.5251 0.3937 0.2954 0.2099 0.1434
     [,12]  [,13]  [,14]  [,15]
FMC 0.0905 0.0612 0.0423 0.0281
F   0.1051 0.0767 0.0559 0.0408
QMC 0.0905 0.0612 0.0423 0.0281
Q   0.0486 0.0273 0.0146 0.0074
L   0.0928 0.0723 0.0504 0.0301
LR  0.0875 0.0618 0.0475 0.0279
NC  0.0850 0.0590 0.0438 0.0255
> 
> 
> b = 10
> k = 4
> 
> #accuracy normal
> A = generateRandomMatrix(rnorm, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rnorm, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9917 0.9395 0.8255 0.6638 0.4873 0.3286 0.2052 0.1194 0.0656 0.0342
F      1 0.9916 0.9394 0.8251 0.6633 0.4873 0.3286 0.2049 0.1193 0.0655 0.0342
QMC    1 0.9917 0.9395 0.8255 0.6638 0.4873 0.3286 0.2052 0.1194 0.0656 0.0342
Q      1 0.9918 0.9402 0.8254 0.6594 0.4753 0.3080 0.1793 0.0937 0.0440 0.0186
L      1 0.9931 0.9506 0.8526 0.7028 0.5277 0.3603 0.2220 0.1254 0.0637 0.0298
LR     1 0.9925 0.9515 0.8538 0.7001 0.5193 0.3463 0.2174 0.1306 0.0604 0.0296
NC     0 0.9925 0.9508 0.8520 0.6979 0.5172 0.3447 0.2156 0.1283 0.0597 0.0290
     [,12]  [,13]  [,14]  [,15]
FMC 0.0171 0.0083 0.0039 0.0018
F   0.0171 0.0083 0.0039 0.0018
QMC 0.0171 0.0083 0.0039 0.0018
Q   0.0070 0.0024 0.0007 0.0002
L   0.0129 0.0048 0.0018 0.0006
LR  0.0120 0.0046 0.0017 0.0005
NC  0.0118 0.0045 0.0016 0.0005
>   
> 
> #accuarcy unif
> A = generateRandomMatrix(runif, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(runif, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9914 0.9381 0.8229 0.6603 0.4840 0.3272 0.2052 0.1209 0.0674 0.0360
F      1 0.9916 0.9394 0.8251 0.6633 0.4873 0.3286 0.2049 0.1193 0.0655 0.0342
QMC    1 0.9914 0.9381 0.8229 0.6603 0.4840 0.3272 0.2052 0.1209 0.0674 0.0360
Q      1 0.9918 0.9402 0.8254 0.6594 0.4753 0.3080 0.1793 0.0937 0.0440 0.0186
L      1 0.9925 0.9447 0.8381 0.6823 0.5050 0.3396 0.2085 0.1148 0.0585 0.0273
LR     1 0.9925 0.9459 0.8430 0.6849 0.5061 0.3410 0.2106 0.1134 0.0576 0.0263
NC     0 0.9924 0.9457 0.8423 0.6840 0.5051 0.3398 0.2093 0.1127 0.0571 0.0260
     [,12]  [,13]  [,14]  [,15]
FMC 0.0185 0.0092 0.0045 0.0021
F   0.0171 0.0083 0.0039 0.0018
QMC 0.0185 0.0092 0.0045 0.0021
Q   0.0070 0.0024 0.0007 0.0002
L   0.0116 0.0044 0.0017 0.0006
LR  0.0109 0.0041 0.0015 0.0005
NC  0.0107 0.0040 0.0014 0.0004
>  
> 
> #accuarcy exp
> A = generateRandomMatrix(rexp, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rexp, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9931 0.9485 0.8439 0.6851 0.5014 0.3303 0.1977 0.1096 0.0573 0.0286
F      1 0.9916 0.9394 0.8251 0.6633 0.4873 0.3286 0.2049 0.1193 0.0655 0.0342
QMC    1 0.9931 0.9485 0.8439 0.6851 0.5014 0.3303 0.1977 0.1096 0.0573 0.0286
Q      1 0.9918 0.9402 0.8254 0.6594 0.4753 0.3080 0.1793 0.0937 0.0440 0.0186
L      1 0.9925 0.9512 0.8680 0.7380 0.5669 0.3919 0.2478 0.1405 0.0722 0.0348
LR     1 0.9927 0.9408 0.8769 0.6898 0.5377 0.3978 0.2602 0.1343 0.0748 0.0376
NC     0 0.9927 0.9408 0.8712 0.6886 0.5336 0.3897 0.2524 0.1315 0.0723 0.0358
     [,12]  [,13]  [,14]  [,15]
FMC 0.0138 0.0066 0.0031 0.0015
F   0.0171 0.0083 0.0039 0.0018
QMC 0.0138 0.0066 0.0031 0.0015
Q   0.0070 0.0024 0.0007 0.0002
L   0.0158 0.0061 0.0021 0.0007
LR  0.0160 0.0060 0.0022 0.0008
NC  0.0152 0.0057 0.0020 0.0007
>  
> #accuracy exp2 
> A = generateRandomMatrix(rexp2, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rexp2, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: Lambda -> maxNR -> maxNRCompute
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: TailDistrMonteCarlo ... IntOnSphereMonteCarlo -> h -> delta -> Lambda -> maxNR -> maxNRCompute
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
Error in rbind(FMC = round(FMC, 4), F = round(F, 4), QMC = round(QMC,  : 
  (converted from warning) number of columns of result is not a multiple of vector length (arg 6)
>  
> 
> #accuracy gamma5
> A = generateRandomMatrix(rgamma5, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rgamma5, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
    [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]
FMC    1 0.9919 0.9403 0.8280 0.6669 0.4900 0.3291 0.2034 0.1168 0.0632 0.0324
F      1 0.9916 0.9394 0.8251 0.6633 0.4873 0.3286 0.2049 0.1193 0.0655 0.0342
QMC    1 0.9919 0.9403 0.8280 0.6669 0.4900 0.3291 0.2034 0.1168 0.0632 0.0324
Q      1 0.9918 0.9402 0.8254 0.6594 0.4753 0.3080 0.1793 0.0937 0.0440 0.0186
L      1 0.9934 0.9524 0.8553 0.7083 0.5354 0.3643 0.2239 0.1251 0.0627 0.0286
LR     1 0.9924 0.9493 0.8579 0.6990 0.5547 0.3611 0.2250 0.1172 0.0702 0.0285
NC     0 0.9924 0.9488 0.8555 0.6969 0.5481 0.3582 0.2224 0.1163 0.0683 0.0280
     [,12]  [,13]  [,14]  [,15]
FMC 0.0160 0.0077 0.0037 0.0017
F   0.0171 0.0083 0.0039 0.0018
QMC 0.0160 0.0077 0.0037 0.0017
Q   0.0070 0.0024 0.0007 0.0002
L   0.0123 0.0049 0.0019 0.0006
LR  0.0128 0.0045 0.0016 0.0006
NC  0.0125 0.0044 0.0015 0.0005
>  
> #accuracy gamma05
> A = generateRandomMatrix(rgamma05, b, k)
> 
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+ A = generateRandomMatrix(rgamma05, b, k)
+ 
+ Fstat = NULL
+ 
+  for (i in 1 : 10000) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+    }
+ 
+ FMC = apply(outer(Fstat, b * u ^ 2/(k-1), ">"), 2, mean)
+ QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+ 
+ FMCall = rbind(FMCall,FMC)
+ QMCall = rbind(QMCall,QMC)
+ 
+ }
> 
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+   Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
> 
> FMC = apply(FMCall,2,mean)
> QMC = apply(QMCall,2,mean) 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2/(k-1) , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: TailDistrMonteCarlo ... IntOnSphereMonteCarlo -> h -> delta -> Lambda -> maxNR -> maxNRCompute
> 
> rbind(FMC=round(FMC,4), F=round(F,4), QMC=round(QMC,4), Q=round(Q,4), L = round(L,4), LR=round(tplr,4), NC=round(tpnc,4))
Error in rbind(FMC = round(FMC, 4), F = round(F, 4), QMC = round(QMC,  : 
  (converted from warning) number of columns of result is not a multiple of vector length (arg 6)
>  
> 
