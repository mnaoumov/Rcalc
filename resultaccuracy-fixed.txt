
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("accuracy-fixed", TRUE)))
> source("PowerFunctions-fixed.R")
Loading required package: miscTools
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
>  
> 
> 
> u = (7 : 14) / 10
> M = 30
> 
> b = 5
> k = 3
> 
> #accuracy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
> 
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.14941 0.10394 0.07650 0.06029 0.04558 0.03278 0.02315 0.01169
F   0.14790 0.09530 0.06100 0.03900 0.02510 0.01630 0.01070 0.00710
QMC 0.32506 0.25219 0.19038 0.13910 0.10935 0.08774 0.07573 0.06239
Q   0.29380 0.20190 0.13200 0.08210 0.04860 0.02730 0.01460 0.00740
L   0.33629 0.24676 0.17863 0.11392 0.07808 0.05604 0.04105 0.03047
LR  0.34350 0.25490 0.17730 0.12290 0.08130 0.05320 0.03740 0.02420
NC  0.34180 0.25270 0.17540 0.12090 0.07960 0.05160 0.03550 0.02250
> 
> 
> b = 10
> k = 4
> 
> #accuracy normal
> A = generateRandomMatrix(rnorm, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00703 0.00151 0.00030 0.00004 0.00002 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20725 0.12069 0.06592 0.03421 0.01703 0.00778 0.00339 0.00124
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21661 0.12122 0.06166 0.02864 0.01205 0.00460 0.00152 0.00050
LR  0.21500 0.12330 0.06330 0.02870 0.01170 0.00460 0.00170 0.00050
NC  0.21340 0.12180 0.06230 0.02810 0.01140 0.00450 0.00160 0.00050
>   
> 
> #accuarcy unif
> A = generateRandomMatrix(runif, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00611 0.00155 0.00018 0.00002 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20412 0.11810 0.06408 0.03210 0.01536 0.00678 0.00301 0.00132
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21834 0.12308 0.06329 0.02886 0.01201 0.00471 0.00172 0.00057
LR  0.21750 0.12210 0.06050 0.02910 0.01240 0.00470 0.00170 0.00050
NC  0.21560 0.12070 0.05970 0.02850 0.01210 0.00460 0.00160 0.00050
>  
> 
> #accuarcy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00387 0.00059 0.00013 0.00001 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20649 0.11440 0.05745 0.02650 0.01130 0.00437 0.00166 0.00045
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.24218 0.13792 0.07019 0.03287 0.01366 0.00512 0.00176 0.00059
LR  0.23220 0.13770 0.07160 0.03380 0.01300 0.00500 0.00190 0.00070
NC  0.22870 0.13440 0.06950 0.03260 0.01270 0.00480 0.00180 0.00060
>  
> #accuracy exp squared
> A = generateRandomMatrix(rexp2, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: Lambda -> maxNR -> maxNRCompute
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
         [,1]       [,2]       [,3]        [,4]        [,5]        [,6]
FMC 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.000000000
F   0.0076000 0.00200000 0.00050000 0.000100000 0.000000000 0.000000000
QMC 0.1621396 0.07559194 0.02262746 0.004415696 0.000381898 0.000000000
Q   0.1793000 0.09370000 0.04400000 0.018600000 0.007000000 0.002400000
L   0.3112543 0.17875641 0.09215897 0.044038668 0.018665712 0.007232367
LR  0.3075000 0.16710000 0.11210000 0.052800000 0.018400000 0.006900000
NC  0.2891000 0.15850000 0.10140000 0.047800000 0.017200000 0.006400000
           [,7]         [,8]
FMC 0.000000000 0.0000000000
F   0.000000000 0.0000000000
QMC 0.000000000 0.0000000000
Q   0.000700000 0.0002000000
L   0.002697219 0.0007876835
LR  0.002400000 0.0010000000
NC  0.002200000 0.0009000000
>  
> 
> #accuracy gamma5
> A = generateRandomMatrix(rgamma5, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00642 0.00127 0.00020 0.00002 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20164 0.11445 0.06126 0.03103 0.01505 0.00705 0.00317 0.00121
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21800 0.12023 0.06081 0.02785 0.01227 0.00480 0.00169 0.00054
LR  0.21270 0.11770 0.06560 0.02930 0.01220 0.00490 0.00170 0.00060
NC  0.21130 0.11670 0.06430 0.02870 0.01190 0.00480 0.00170 0.00060
>  
> #accuracy gamma05
> A = generateRandomMatrix(rgamma05, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
