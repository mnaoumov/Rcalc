
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("k-sample-power-all-distr", TRUE)))
> 
> 
> kcgf= function(tau,xd, f)
+ {
+ #This function calculates K(tau), K"(tau) and K"(tau), where
+ #t is a 2*(k-1) dimensional matrix, K(t) is a real number.
+ #Inputs:t  in K(t).      
+ #       xd=the population: a=1,a=2, ..., a=N.
+ #       f=vector of ratios of group sizes (n_2,..  .,n_{k-1}) and population size (N), 
+ #Outputs:cgf2$cgf:K(tau)
+ #        cgf2$dcgf:K'(tau)
+ #        cgf2$ddc gf:K"(tau)
+ #           
+         taum=matrix(tau,length(f),2)
+         nn = length(xd)
+         xsd = sqrt((var(xd) * (nn - 1))/nn)
+         xdb = mean(xd)
+         x = (xd - xdb)/xsd
+         f1=1-sum(f)
+         nn1=rep(1,nn)
+         x2=rbind(nn1,x)
+         kt = mean(log(f1 + f%*%exp(taum%*%x2)))
+ 	  h=t(t(f * exp(taum%*%x2))/c(f1 + f %*% exp(taum%*%x2)))
+         hx=t(x*t(f * exp(taum%*%x2))/c(f1 + f %*% exp(taum%*%x2)))
+         hhx=rbind(h,hx)
+         dk = c(h%*%t(x2)/nn)
+         ddk= (cbind(rbind(diag(c(h%*%nn1)),diag(c(h%*%x))),rbind(diag(c(h%*%x)),diag(c(hx%*%x))))-hhx%*%t(hhx))/nn
+         list(cgf = kt, dcgf = dk, ddcgf = ddk)
+ }
> 
> kLam=function(x1,t0,xd,f)
+ #kLam=function(x1,xd,f)
+ 
+ {
+ #This function solves  K'(t)=x for a given x=(f,x1).   
+ #Inputs: x1: a given k-1-dimension vector.
+ #        tt: an initial value for Newton's method of finding the 
+ #            root of  k'(t)-x for a given x.
+ #	 xd: population.
+ #	 f=n/N
+ #Outputs: Lam$lam=\Lambda(x)
+ #         Lam$t=t(x), 3-dimension vector, t(x)%*%x-K(t(x))=sup{t.x-K(t): t}
+ #         Lam$$kdd K"(t(x))
+ #Get tt=tt(x), tt(x)%*%x-K(t0(x))=sup{t%*%x-K(t): t}
+ 
+        fx=c(f,x1)
+        checkNA=0
+        lf=length(f)
+        tt=rep(0,2*lf)
+       for (i in 1:10)
+ 	{   
+ 	    ktt=kcgf(tt,xd,f)
+ 	    if (!is.na(det(ktt$ddcgf)) && det(ktt$ddcgf)>.00000001)
+ 	    {tt=tt+solve(ktt$ddcgf)%*%(fx-ktt$dcgf)} else {{checkNA=1}&{break}}#t0=t0+solve(ktt$ddcgf)%*%(fx-ktt$dcgf)
+         }
+ 	ktt=kcgf(tt,xd,f)
+ 	list(lam=-ktt$cgf+fx%*%tt,t=tt,kdd=ktt$ddcgf,err=fx-ktt$dcgf,checkNA=checkNA)
+ }
> 
> 
> 
> 
> kHu=function(xd, f, v,M)
+ {
+ #this function calculates SP tail probs for k-sample perm test based on Lam(x)
+ #input xd data, f group proportions for k-1, v P(Lam(X)>v),M= no of MC in integral
+ #first define 
+ 
+         nn = length(xd)
+         n = f * nn
+         xsd = sqrt((var(xd) * (nn - 1))/nn)
+         xdb = mean(xd)
+         x = (xd - xdb)/xsd
+         f1=1-sum(f)
+         lf=length(f)
+         tailp1=1-pchisq(nn*v^2,lf)#first order approximation
+         VV=kcgf(rep(0,2*lf),x,f)$ddcgf[(lf+1):(2*lf),(lf+1):(2*lf)]#xd
+         svdV=svd(VV)
+         Vh=svdV$u%*%diag(svdV$d^(1/2))%*%t(svdV$v)
+         Gu=0
+         sdelus=matrix(0,M,lf+4)
+         Mm=M                              
+         for (i in 1:M){
+                        s=rnorm(lf)
+                        s=s/sqrt(sum(s^2))
+                        s=c(Vh%*%s)
+                        r=v
+                        #t0=c(kLam(xb,rep(0,2*lf),x,f)$t)
+                        t0=rep(0,2*lf)
+                       
+                        for (j in 1:6){ 
+                            kl=kLam(r*s,t0,x,f)                        
+                            if (kl$checkNA == 1)
+                              break;
+                            r=r+(v-sqrt(2*kl$lam))*sqrt(2*kl$lam)/sum(s*kl$t[(lf+1):(2*lf)])                          
+                            t0=c(kl$t)
+                                      }
+                        kl=kLam(r*s,t0,x,f)#xd
+                     
+                        if (kl$checkNA==1){delus=NA}else {delus= f1*prod(f)*r^2/(v*sum(s*kl$t[(lf+1):(2*lf)])*(det(kl$kdd))^.5)}  
+                        #Gu=ifelse(abs(v-sqrt(2*kl$lam))>.00001,Gu,Gu+delus)
+                        if (kl$checkNA==0) Gu=Gu+delus
+                        if (kl$checkNA==1) Mm=Mm-1 
+ sdelus[i,]=c(delus,r*s,v-sqrt(2*kl$lam),sum(s*kl$t[(lf+1):(2*lf)]),det(kcgf(kl$t,xd,f)$ddcgf))
+                       #if(abs(v-sqrt(2*kl$lam))>.00001) print(c(abs(v-sqrt(2*temk)),det(kcgf(kl$t,xd,f)$ddcgf)))
+                        }
+         cn=(nn^(lf/2))/((2)^(lf/2-1)*gamma(lf/2))      
+         tailp=ifelse(Mm==0,tailp1,tailp1+nn^(-1)*cn*v^(lf-2)*exp(-nn*v^2/2)*(Gu/Mm-1))
+         tailpBN=ifelse(Mm==0,tailp1,1-pchisq(nn*(v-log(Gu/Mm)/(nn*v))^2,lf))
+         list(tailpchi2=tailp1,tailp=c(tailp,tailpBN),sdelus=sdelus,Mm=Mm)
+ }
> 
> 
> 
> 
> 
>  pvalcal=function(xd,f,M=0,MC=0,vv=0)
+                       {
+                        nn=length(xd)
+                        n=f*nn
+                        xsd = sqrt((var(xd) * (nn - 1))/nn)
+                        xdb = mean(xd)
+                        x = (xd - xdb)/xsd
+                        f1=1-sum(f)
+                        lf=length(f)
+                        #N=c(cumsum(n),nn)
+                        N=c(0,cumsum(n)) 
+                        xb=orderedMeans=rep(0,lf)
+                        for(i in 1:lf){xb[i]=sum(x[(N[i]+1):N[i+1]])/nn}
+                       
+                        #xs=sort(x)
+                        #for(i in 1:lf){orderedMeans[i]=sum(xs[(N[i]+1):N[i+1]])/nn}
+                        #orderedMeans=c(-sum(orderedMeans),orderedMeans) 
+                        vl=kLam(xb,rep(0,2*lf),xd,f)
+                        v=ifelse(vv==0,sqrt(2*vl$lam),vv)
+                        out=ifelse(M==0,1-pchisq(nn*v^2,lf),kHu(xd,f,v,M)$tailp)
+                        #MCcal=function(MC){
+                        MCpv=rep(0,MC)
+                        MCsqpv=rep(0,MC)
+                        MCm=MC
+                        for (k in 1:MC){
+                                        xs=sample(x,nn)
+                                        xsb=rep(0,lf)
+                                        for(i in 1:lf){xsb[i]=sum(xs[(N[i]+1):N[i+1]])/nn}
+                                        #MCpv=MCpv+(kLam(xsb,rep(0,2*lf),xd,f)$lam>v^2/2)
+                                        MCpv[k]=kLam(xsb,rep(0,2*lf),xd,f)$lam
+                                        xsbk=c(xsb,-sum(xsb))
+                                        MCsqpv[k]=nn*xsbk%*%diag(1/c(f,f1))%*%xsbk
+                                       }
+                        #MCpv= MCpv/(MC+1)
+                                                   
+                        #MCpv=ifelse(MC==0,"null",MCpv)#MCcal(MC))
+                        list(SPpv=out,MCpv=MCpv,MCsqpv=MCsqpv,xb=xb)
+                        }
> 
> library(gtools)
> library(maxLik)
Loading required package: miscTools
> 
> 
> #misha's programma
> 
> 
> generateVector = function(randomGenerator, N) {
+   a = randomGenerator(N)
+   N = length(a)
+   a = (a - mean(a)) / sqrt(var(a) * (N - 1) / N)
+   a
+ }
> 
> getMean = function(b, f) {
+   k = length(f) + 1
+   N = length(b)
+   f1 = c(f, 1 - sum(f))
+   n = f1 * N
+   
+   means = numeric(k - 1)
+   lastIndex = 0
+   for (i in 1 : (k - 1)) {
+     nextIndex = lastIndex + n[i]
+     means[i] = sum(b[(lastIndex + 1) : nextIndex]) / N;
+     lastIndex = nextIndex
+   }
+   
+   means
+ }
> 
> PowerForMu = function(mu, distr, f, Z=1000, M=10000) {
+   k = length(f) + 1
+   N = length(mu)
+   n = f*N
+     
+   pFValues = numeric(Z)
+   #pLValues = numeric(Z)
+   pSPLRValues = numeric(Z)
+   pSPBNValues = numeric(Z)
+   
+   for (i in 1 : Z) {
+     a = generateVector(distr, N)
+     a = a + mu
+     a = (a - mean(a)) / sqrt(var(a) * (N - 1) / N)
+     Xbar = getMean(a, f)
+     Fbar = c(Xbar, -sum(Xbar))
+ 
+     LVal = kLam(Xbar, rep(0, 2 * (k - 1)), a, f)
+        u = sqrt(2*LVal$lam)
+     FVal = c(N*Fbar%*%diag(1/c(n,N-sum(n)))%*%Fbar)
+    
+     FValues = pvalcal(a,f,MC=M)$MCsqpv
+     #LValues = NULL
+     
+     pFValues[i] = mean(FValues > FVal)
+     #pLValues[i] = mean(TValues > TVal)
+ 	tt2 = kHu(a, f, u, 100)$tailp
+     pSPLRValues[i] = tt2[1]
+     pSPBNValues[i] = tt2[2]
+   }
+   
+   PowerF = mean(pFValues < .05)
+   #PowerL = mean(pLValues < .05)
+   PowerSPLR = mean(pSPLRValues < .05)
+   PowerSPBN = mean(pSPBNValues < .05)
+ 
+   list (PowerF = PowerF, PowerSPLR = PowerSPLR,PowerSPBN = PowerSPBN)
+ }
> 
> 
> generateVector = function(randomGenerator, N) {
+   a = randomGenerator(N)
+   N = length(a)
+   a = (a - mean(a)) / sqrt(var(a) * (N - 1) / N)
+   a
+ }
> 
> getMean = function(b, f) {
+   k = length(f) + 1
+   N = length(b)
+   f1 = c(f, 1 - sum(f))
+   n = f1 * N
+   
+   means = numeric(k - 1)
+   lastIndex = 0
+   for (i in 1 : (k - 1)) {
+     nextIndex = lastIndex + n[i]
+     means[i] = sum(b[(lastIndex + 1) : nextIndex]) / N;
+     lastIndex = nextIndex
+   }
+   
+   means
+ }
> 
> PowerForMu = function(mu, distr, f, Z=1000, M=1000) {
+    lf = length(f)   #k-1
+    f1 = 1-sum(f)
+    nn = length(mu)
+     n = f*nn
+     N = c(0,cumsum(n)) 
+ 
+   pFValues = numeric(Z)
+   pSPLRValues = numeric(Z)
+   pSPBNValues = numeric(Z)
+   
+   for (i in 1 : Z) {
+     a = generateVector(distr, nn)
+     a = a + mu
+     a = (a - mean(a)) / sqrt(var(a) * (nn - 1) / nn)
+      
+  Xbar = getMean(a, f)
+  Fbar = c(Xbar, -sum(Xbar))
+ 
+     LVal = kLam(Xbar, rep(0, 2 * (k - 1)), a, f)
+        u = sqrt(2*LVal$lam)
+     FVal = c(nn*Fbar%*%diag(1/c(f,f1))%*%Fbar)
+    
+ FValue = numeric(M)
+ for (j in 1 : M) {
+    xs = sample(a,nn)
+    xsb = getMean(xs,f)
+    xsbk = c(xsb,-sum(xsb))
+    FValue[j] = nn*xsbk%*%diag(1/c(f,f1))%*%xsbk
+    }
+     
+     pFValues[i] = mean(FValue > FVal)
+     	tt2 = kHu(a, f, u, 10)$tailp
+     pSPLRValues[i] = tt2[1]
+     pSPBNValues[i] = tt2[2]
+   }
+   
+   PowerF = mean(pFValues < .05)
+   PowerSPLR = mean(pSPLRValues < .05)
+   PowerSPBN = mean(pSPBNValues < .05)
+ 
+   rbind(PowerF = PowerF, PowerSPLR = PowerSPLR,PowerSPBN = PowerSPBN)
+ }
> 
>  rexp2 = function(N) {
+    rexp(N) ^ 2
+  }
>  
>  rgamma5 = function(N) {
+    rgamma(N, 5)
+  }
>  
>  rgamma05 = function(N) {
+    rgamma(N, 0.5)
+  }
> 
> 
> f=c(.25,.25,.25)
> 
> #power norm
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,rnorm,f,1000,1000)
           [,1]
PowerF    0.050
PowerSPLR 0.047
PowerSPBN 0.048
> 
> mu=c(rep(-.3,10),rep(0,10),rep(0,10),rep(.3,10))
> PowerForMu(mu,rnorm,f,1000,1000)
           [,1]
PowerF    0.153
PowerSPLR 0.148
PowerSPBN 0.151
> 
> mu=c(rep(-.5,10),rep(0,10),rep(0,10),rep(.5,10))
> PowerForMu(mu,rnorm,f,1000,1000)
           [,1]
PowerF    0.377
PowerSPLR 0.384
PowerSPBN 0.386
> 
> mu=c(rep(-1,10),rep(0,10),rep(0,10),rep(1,10))
> PowerForMu(mu,rnorm,f,1000,1000)
           [,1]
PowerF    0.960
PowerSPLR 0.957
PowerSPBN 0.957
> 
> mu=c(rep(-1.2,10),rep(0,10),rep(0,10),rep(1.2,10))
> PowerForMu(mu,rnorm,f,1000,1000)
           [,1]
PowerF    0.999
PowerSPLR 0.999
PowerSPBN 0.999
> 
> mu=c(rep(-1.4,10),rep(0,10),rep(0,10),rep(1.4,10))
> PowerForMu(mu,rnorm,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.6,10),rep(0,10),rep(0,10),rep(1.6,10))
> PowerForMu(mu,rnorm,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.9,10),rep(0,10),rep(0,10),rep(1.9,10))
> PowerForMu(mu,rnorm,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> 
> #power unif
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,unif,f,1000,1000)
Error in generateVector(distr, nn) : object 'unif' not found
Calls: PowerForMu -> generateVector
> 
> mu=c(rep(-.3,10),rep(0,10),rep(0,10),rep(.3,10))
> PowerForMu(mu,unif,f,1000,1000)
Error in generateVector(distr, nn) : object 'unif' not found
Calls: PowerForMu -> generateVector
> 
> mu=c(rep(-.5,10),rep(0,10),rep(0,10),rep(.5,10))
> PowerForMu(mu,unif,f,1000,1000)
Error in generateVector(distr, nn) : object 'unif' not found
Calls: PowerForMu -> generateVector
> 
> mu=c(rep(-1,10),rep(0,10),rep(0,10),rep(1,10))
> PowerForMu(mu,unif,f,1000,1000)
Error in generateVector(distr, nn) : object 'unif' not found
Calls: PowerForMu -> generateVector
> 
> mu=c(rep(-1.2,10),rep(0,10),rep(0,10),rep(1.2,10))
> PowerForMu(mu,unif,f,1000,1000)
Error in generateVector(distr, nn) : object 'unif' not found
Calls: PowerForMu -> generateVector
> 
> mu=c(rep(-1.4,10),rep(0,10),rep(0,10),rep(1.4,10))
> PowerForMu(mu,runif,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.6,10),rep(0,10),rep(0,10),rep(1.6,10))
> PowerForMu(mu,runif,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.9,10),rep(0,10),rep(0,10),rep(1.9,10))
> PowerForMu(mu,runif,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> #power exp
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,rexp,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-.3,10),rep(0,10),rep(0,10),rep(.3,10))
> PowerForMu(mu,rexp,f,1000,1000)
           [,1]
PowerF    0.185
PowerSPLR 0.210
PowerSPBN 0.213
> 
> mu=c(rep(-.5,10),rep(0,10),rep(0,10),rep(.5,10))
> PowerForMu(mu,rexp,f,1000,1000)
           [,1]
PowerF    0.378
PowerSPLR 0.422
PowerSPBN 0.425
> 
> mu=c(rep(-1,10),rep(0,10),rep(0,10),rep(1,10))
> PowerForMu(mu,rexp,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-1.2,10),rep(0,10),rep(0,10),rep(1.2,10))
> PowerForMu(mu,rexp,f,1000,1000)
           [,1]
PowerF    0.999
PowerSPLR 0.999
PowerSPBN 0.999
> 
> mu=c(rep(-1.4,10),rep(0,10),rep(0,10),rep(1.4,10))
> PowerForMu(mu,rexp,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.6,10),rep(0,10),rep(0,10),rep(1.6,10))
> PowerForMu(mu,rexp,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.9,10),rep(0,10),rep(0,10),rep(1.9,10))
> PowerForMu(mu,rexp,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> 
> #power exponential squared
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-.3,10),rep(0,10),rep(0,10),rep(.3,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-.5,10),rep(0,10),rep(0,10),rep(.5,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-1,10),rep(0,10),rep(0,10),rep(1,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-1.2,10),rep(0,10),rep(0,10),rep(1.2,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-1.4,10),rep(0,10),rep(0,10),rep(1.4,10))
> PowerForMu(mu,rexp2,f,1000,1000)
Error in sqrt(2 * kl$lam) : (converted from warning) NaNs produced
Calls: PowerForMu -> kHu
> 
> mu=c(rep(-1.6,10),rep(0,10),rep(0,10),rep(1.6,10))
> PowerForMu(mu,rexp2,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.9,10),rep(0,10),rep(0,10),rep(1.9,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> #power gamma5
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
           [,1]
PowerF    0.070
PowerSPLR 0.077
PowerSPBN 0.077
> 
> mu=c(rep(-.3,10),rep(0,10),rep(0,10),rep(.3,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
           [,1]
PowerF    0.163
PowerSPLR 0.174
PowerSPBN 0.175
> 
> mu=c(rep(-.5,10),rep(0,10),rep(0,10),rep(.5,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
           [,1]
PowerF    0.384
PowerSPLR 0.374
PowerSPBN 0.377
> 
> mu=c(rep(-1,10),rep(0,10),rep(0,10),rep(1,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
           [,1]
PowerF    0.957
PowerSPLR 0.960
PowerSPBN 0.960
> 
> mu=c(rep(-1.2,10),rep(0,10),rep(0,10),rep(1.2,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
           [,1]
PowerF    0.997
PowerSPLR 0.998
PowerSPBN 0.998
> 
> mu=c(rep(-1.4,10),rep(0,10),rep(0,10),rep(1.4,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.6,10),rep(0,10),rep(0,10),rep(1.6,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> mu=c(rep(-1.9,10),rep(0,10),rep(0,10),rep(1.9,10))
> PowerForMu(mu,rgamma5,f,1000,1000)
          [,1]
PowerF       1
PowerSPLR    1
PowerSPBN    1
> 
> 
> #power gamma05
> mu=c(rep(-.1,10),rep(0,10),rep(0,10),rep(.1,10))
> PowerForMu(mu,rgamma05,f,1000,1000)
