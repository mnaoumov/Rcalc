
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2)
> 
> # used for permutations
> library(gtools)
> 
> # used for maxNR
> library(maxLik)
Loading required package: miscTools
> 
> generateRandomMatrix = function(randomGenerator, b, k) {
+   A = matrix(randomGenerator(b * k), b, k)
+   A = A - apply(A, 1, mean)
+   A = A / sqrt(mean(A ^ 2))
+ }
> 
> getb = function(A) dim(A)[1]
> getk = function(A) dim(A)[2]
> 
> perm = function(A, i) {
+   k = getk(A)
+   permutations(k, k - 1, A[i,])
+ }
> 
> expb = function(A, i, beta) exp(perm(A, i) %*% beta)
> 
> kappa = function(A, beta) {
+   b = getb(A)
+   k = getk(A)
+   s = 0
+   for (i in 1 : b) s = s + log(sum(expb(A, i, beta)) / prod(1 : k))
+   s / b
+ }
>   
> kappad = function(A, beta) {
+   b = getb(A)
+   k = getk(A)
+   s = 0
+   for (i in 1 : b) {
+     expb = expb(A, i, beta)
+     s = s + t(perm(A, i)) %*%  expb / sum(expb)
+   }
+   
+   s / b
+ }
> 
> kappad2 = function(A, beta) {
+   b = getb(A)
+   k = getk(A)
+   s = 0
+   for (i in 1 : b) {
+     perm = perm(A, i)
+     expb = expb(A, i, beta)
+     s = s - (t(perm) %*% expb %*% t(expb) %*% perm) / sum(expb) ^ 2 +
+       (t(perm) %*% diag(c(expb)) %*% perm) / sum(expb)
+   }
+ 
+   s / b
+ }
> 
> orderedMeans = function(A) {
+   b = getb(A)
+   k = getk(A)
+   ASorted = matrix(numeric(), b, k)
+   for(i in 1 : b)
+     ASorted[i,] = sort(A[i,])
+   
+   colMeans(ASorted)
+ }
> 
> 
> getRandomMean = function(A) {
+   b = getb(A)
+   k = getk(A)
+     B = array(dim = c(b, k))
+   for(i in 1 : b)
+     B[i,] = sample(A[i,], k)
+ 
+   mean = apply(B, 2, mean)[1 : (k - 1)]
+     mean
+ }
> 
> addMu = function(A, mu) {
+   B = A
+   b = dim(B)[1]
+     for (i in 1 : b)
+     B[i,] = B[i,] + mu
+ 
+   B/sqrt(mean(B^2))
+ }
> 
> isPointInsideDomain = function(A, x, tolerance = 1) {
+   k = getk(A)
+   
+   y = x
+   if (length(y) == k - 1)
+     y[length(y) + 1] = -sum(y)
+   
+   stopifnot(length(y) == k)
+   
+   for (usedIndices in 1 : (k - 1)) {
+     subVectors = combinations(k, usedIndices, y, set = FALSE)
+     subVectorSums = apply(subVectors, 1, sum)
+     sumMins = sum(orderedMeans(A)[1 : usedIndices])
+     sumMaxs = sum(orderedMeans(A)[(k - usedIndices + 1) : k])
+     if (!all(subVectorSums > sumMins * tolerance))
+       return(FALSE);
+     if (!all(subVectorSums < sumMaxs * tolerance))
+       return(FALSE);
+   }
+   return(TRUE)
+ }
> 
> 
> putInsideDomain = function(A, x, tolerance) {
+   if (isPointInsideDomain(A, x, tolerance))
+   {
+     return (x)
+   }
+   
+   norm = sqrt(sum(x ^ 2))
+   
+   inside = 0
+   outside = norm
+   
+   # 2^(-15) < 0.0001
+   for (i in 1 : 15) {
+     r = (inside + outside) / 2
+     y = x / norm * r
+     if (!isPointInsideDomain(A, y, tolerance))
+       outside = r
+     else
+       inside = r
+   }
+   
+   return (x / norm * inside)
+ }
> 
> Lambda = function(A, x, tolerance = 0.9999) {
+   k = getk(A)
+   #x = putInsideDomain(A, x, tolerance)
+   
+   ll = function(beta) { beta %*% x - kappa(A, beta) }
+   lll = function(beta) { x - kappad(A, beta)[,1] }
+   llll = function(beta) { -kappad2(A, beta) }
+   lam = try(maxNR(ll, grad = lll, hess = llll, start = rep(0, k - 1), tol = 1 - tolerance), silent = TRUE)
+   
+   if ((length(lam) == 1) && (class(lam) == "try-error")) {
+     return (list(checkNA =  1))
+   }
+   
+   lam$checkNA = 0
+   
+   lam
+ }
> 
> Sqr = function(M) { svd(M)$u %*% diag(sqrt(svd(M)$d)) %*% t(svd(M)$v) }
> 
> UniformOnSphere = function(n) {
+   x = rnorm(n)
+   r = sqrt(sum(x ^ 2))
+   x / r
+ }
> 
> IntOnSphereMonteCarlo = function(h, d, M) {
+   sum = 0
+   pointsSkipped = 0
+   for(i in 1 : M) {
+     funcValue = h(UniformOnSphere(d))
+     if (is.na(funcValue))
+       pointsSkipped = pointsSkipped + 1
+     else
+       sum = sum + funcValue
+   }
+   
+   if (pointsSkipped == M) {
+     return (0)
+   }
+   
+   sum / (M - pointsSkipped)
+ }
> 
> V0h = function(A) {
+   k = getk(A)
+   Sqr(kappad2(A, rep(0, k - 1)))  
+ }
> 
> transformIntoSphere = function(A, r, s) {
+   (r * V0h(A) %*% s)[,1]
+ }
> 
> delta = function(A, u, s, deltaIterations = 5) {
+   k = getk(A)
+   r = u
+   V0h = V0h(A)
+   
+   for (i in 1 : deltaIterations) {
+     tr = transformIntoSphere(A, r, s)
+     L = Lambda(A, tr)
+     
+     if (L$checkNA == 1) {
+       return (NA)
+     }
+     r = r - ((L$max - u ^ 2 / 2) / (L$est %*% V0h %*% s))[1,1]
+   }
+   
+   betah = L$est
+   
+   (det(kappad2(A, betah)) ^ (- 1 / 2) * r ^ (k - 2) * det(V0h)) / (u ^ (k - 3) * abs(t(s) %*% V0h %*% betah))
+ }
> 
> TailDistrMonteCarlo = function(A, u, M, deltaIterations = 5) {
+   k = getk(A)
+   b = getb(A)
+   
+   delta2 = function(s) delta(A, u, s, deltaIterations)
+   
+   cb = (b ^ ((k - 1) / 2)) / (2 ^ ((k - 1) / 2 - 1) * gamma((k - 1) / 2))
+   Gb = IntOnSphereMonteCarlo(delta2, k - 1, M)
+   
+   LugRice = 1 - pchisq(b * u ^ 2, k - 1) + cb / b * u ^ (k - 3) * exp(-b * u ^ 2 / 2) * (Gb - 1)
+   ustar = u - log(Gb) / (b * u)
+   NielCox = 1 - pchisq(b * ustar ^ 2, k - 1)
+   list(LR=c(LugRice), NC=c(NielCox))
+ }
> 
> 
> #power
> 
> PowerForMu = function(mu, distr, Z, V) {
+     
+   pFValues = numeric(Z)
+   pLRValues = numeric(Z)
+   pNCValues = numeric(Z)
+   
+   for (i in 1 : Z) {
+ A = generateRandomMatrix(distr, b, k)
+ A = addMu(A, mu)
+ A = A - apply(A, 1, mean)
+ A = A / sqrt(mean(A ^ 2))
+ 
+ Xbar = getRandomMean(A)
+ Fbar = c(Xbar, -sum(Xbar))
+ LVal = Lambda(A,Xbar)
+    u = sqrt(2*LVal$max)
+ FVal = b*sum(Fbar ^ 2)/(mean(A^2))
+ 
+ xxx = NULL; for (j in 1 : V) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
+ xxx = matrix(xxx, k , V)
+ 
+ FValues = b * apply(xxx ^ 2, 2, sum)
+ 
+     pFValues[i] = mean(FValues > FVal)
+     tt = TailDistrMonteCarlo(A,u,M=20,deltaIterations = 5)
+     pLRValues[i] = tt$LR
+     pNCValues[i] = tt$NC
+   }
+   
+   PowerF = mean(pFValues < .05)
+   PowerLR = mean(pLRValues < .05)
+   PowerNC = mean(pNCValues < .05)
+   
+   list (PowerF = PowerF, PowerLR = PowerLR, PowerNC = PowerNC)
+ }
> 
> 
> #accuracy
> b = 10
> k = 4
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC  0.4586600 0.3082600 0.18683000 0.10026000 0.04694000 0.018710000
F    0.3285765 0.2049422 0.11933334 0.06549233 0.03419779 0.017140770
Q    0.3080222 0.1792678 0.09369079 0.04398959 0.01856614 0.007048336
L    0.3518500 0.2186800 0.12303000 0.06270000 0.02873000 0.012020000
tplr 0.3557650 0.2228293 0.11852657 0.06294727 0.02994910 0.012736616
tpnc 0.3533558 0.2204497 0.11742801 0.06192685 0.02927554 0.012385389
            [,7]         [,8]         [,9]
FMC  0.005780000 0.0013600000 1.700000e-04
F    0.008314040 0.0039310301 1.823489e-03
Q    0.002408284 0.0007410104 2.054233e-04
L    0.004650000 0.0015500000 5.100000e-04
tplr 0.006140989 0.0020773142 9.546920e-06
tpnc 0.005809443 0.0019635286 0.000000e+00
> 
> 
> b = 10
> k = 4
> A = generateRandomMatrix(rnorm, b, k)
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC  0.4543200 0.3063900 0.18688000 0.10159000 0.04855000 0.020850000
F    0.3285765 0.2049422 0.11933334 0.06549233 0.03419779 0.017140770
Q    0.3080222 0.1792678 0.09369079 0.04398959 0.01856614 0.007048336
L    0.3411634 0.2084621 0.11510115 0.05746057 0.02667027 0.011610116
tplr 0.3415045 0.2127673 0.11292167 0.05923508 0.02755162 0.011683889
tpnc 0.3403022 0.2113390 0.11225363 0.05856340 0.02712158 0.011444604
            [,7]         [,8]         [,9]
FMC  0.007400000 0.0021300000 0.0004600000
F    0.008314040 0.0039310301 0.0018234889
Q    0.002408284 0.0007410104 0.0002054233
L    0.004340043 0.0016100161 0.0005100051
tplr 0.004819670 0.0017559841 0.0006068296
tpnc 0.004669943 0.0016865349 0.0005754774
> 
> 
> b = 5
> k = 3
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]      [,3]      [,4]      [,5]       [,6]       [,7]
FMC  0.5819300 0.4674400 0.3682800 0.2761500 0.1991600 0.13191000 0.08383000
F    0.4440743 0.3434747 0.2603082 0.1942727 0.1434123 0.10511257 0.07673360
Q    0.4065697 0.2937577 0.2018965 0.1319938 0.0820850 0.04855782 0.02732372
L    0.4604400 0.3498100 0.2589400 0.1865200 0.1215600 0.08351000 0.05560000
tplr 0.4595908 0.3479335 0.2610200 0.1849875 0.1270547 0.08867331 0.06213170
tpnc 0.4576765 0.3459053 0.2583434 0.1824038 0.1246529 0.08605512 0.05928704
           [,8]         [,9]
FMC  0.04610000 1.884000e-02
F    0.05593664 4.080186e-02
Q    0.01462533 7.446583e-03
L    0.03746000 2.717000e-02
tplr 0.03723005 3.989864e-17
tpnc 0.03535563 0.000000e+00
> 
> 
> b = 10
> k = 4
> A = generateRandomMatrix(runif, b, k)
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC  0.4540700 0.3076800 0.18860000 0.10251000 0.05043000 0.021300000
F    0.3285765 0.2049422 0.11933334 0.06549233 0.03419779 0.017140770
Q    0.3080222 0.1792678 0.09369079 0.04398959 0.01856614 0.007048336
L    0.3396800 0.2065900 0.11240000 0.05626000 0.02593000 0.010800000
tplr 0.3368515 0.2103502 0.11583949 0.05792849 0.02656200 0.011069433
tpnc 0.3359559 0.2091162 0.11495986 0.05736345 0.02621794 0.010886589
            [,7]         [,8]         [,9]
FMC  0.007820000 0.0024600000 0.0004900000
F    0.008314040 0.0039310301 0.0018234889
Q    0.002408284 0.0007410104 0.0002054233
L    0.004120000 0.0016600000 0.0005000000
tplr 0.004348489 0.0015781230 0.0005287735
tpnc 0.004248527 0.0015292644 0.0005074629
> 
> 
> b = 10
> k = 4
> A = array(rexp(b * k)^2, c(b, k))
> A = A - apply(A, 1, mean)
> A = A / sqrt(mean(A ^ 2))
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]       [,3]        [,4]        [,5]         [,6]
FMC  0.5261700 0.3132700 0.12700000 0.067010000 0.048780000 0.0183100000
F    0.3285765 0.2049422 0.11933334 0.065492329 0.034197792 0.0171407702
Q    0.3080222 0.1792678 0.09369079 0.043989590 0.018566135 0.0070483364
L    0.4871097 0.2964759 0.17407348 0.094781896 0.045590912 0.0196103922
tplr 0.6023090 0.4549492 0.34081465 0.004426526 0.001565402 0.0005042182
tpnc 0.5294056 0.3836535 0.26953028 0.000000000 0.000000000 0.0000000000
             [,7]         [,8]         [,9]
FMC  0.0023500000 3.000000e-05 0.000000e+00
F    0.0083140400 3.931030e-03 1.823489e-03
Q    0.0024082842 7.410104e-04 2.054233e-04
L    0.0077301546 2.860057e-03 1.050021e-03
tplr 0.0001478023 3.940158e-05 9.546920e-06
tpnc 0.0000000000 0.000000e+00 0.000000e+00
> 
> 
> b = 10
> k = 4
> A = array(rgamma(b * k,4), c(b, k))
> A = A - apply(A, 1, mean)
> A = A / sqrt(mean(A ^ 2))
> iterations = 100000
> u = (6 : 14) / 10
> M = 30
> 
> xxx = NULL; for (i in 1 : iterations) xxx = c(xxx, apply(t(apply(A, 1, sample, size = k)), 2, mean))
> xxx = matrix(xxx, k, iterations)
> 
> Lstat = NULL; for (i in 1 : iterations) Lstat = c(Lstat, Lambda(A, xxx[,i][1:(k-1)])$max)
> Fstat = b * apply(xxx ^ 2, 2, sum)
> 
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 / (k-1), k-1, (k-1) * (b-1))
> 
> tplr = NULL
> tpnc = NULL
> 
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+   tplr = c(tplr, tt$LR)
+   tpnc = c(tpnc, tt$NC)
+ }
> 
> rbind(FMC, F, Q, L, tplr, tpnc)
          [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC  0.4574600 0.3063300 0.18627000 0.10157000 0.04982000 0.021010000
F    0.3285765 0.2049422 0.11933334 0.06549233 0.03419779 0.017140770
Q    0.3080222 0.1792678 0.09369079 0.04398959 0.01856614 0.007048336
L    0.3416700 0.2068500 0.11359000 0.05733000 0.02648000 0.010540000
tplr 0.3400361 0.2132024 0.11315947 0.05878256 0.02689520 0.011105042
tpnc 0.3389354 0.2117377 0.11247522 0.05814878 0.02652317 0.010919112
            [,7]         [,8]         [,9]
FMC  0.007300000 0.0021700000 0.0006500000
F    0.008314040 0.0039310301 0.0018234889
Q    0.002408284 0.0007410104 0.0002054233
L    0.003940000 0.0015700000 0.0005600000
tplr 0.004255450 0.0015078425 0.0004643012
tpnc 0.004164275 0.0014662719 0.0004500654
> 
> #power
> 
> PowerForMu (mu=c(0,0,0,0),distr=rexp,Z=1000,V=10000)
Error in log(Gb) : (converted from warning) NaNs produced
Calls: PowerForMu -> TailDistrMonteCarlo
Execution halted
