
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("new", TRUE)))
> source("PowerFunctions.R")
Loading required package: miscTools
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
> 
> b = 10
> k = 4
> 
> u = (7 : 12) / 10
> M = 30
> 
> #accuracy normal
> FMCall=NULL
> QMCall=NULL
> 
> for (j in 1:100){
+   A = generateRandomMatrix(rnorm, b, k)
+   iterations = 10000 
+   
+   Fstat = NULL
+   Lstat = NULL
+   
+   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))#apply(A, 1, sample, size = k)
+     xx = apply(B, 2, mean)#apply(B, 1, mean)
+     SST = b * sum(xx ^ 2) 
+     SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)#sum((B - xx) ^ 2)
+     Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))#c(Fstat, SST/ (k - 1) / (SSE / ((k - 1) * (b - 1)) ))
+     Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+   }
+   
+   L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
+   FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
+   QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
+   Q = 1 - pchisq(b * u ^ 2, k - 1)
+   F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
+   
+   FMC
+   round(F,4)
+   QMC
+   round(Q,4)
+   FMCall=rbind(FMCall,FMC)
+   QMCall=rbind(QMCall,FMC)
+ } 
