
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("accuracy", TRUE)))
> source("PowerFunctions.R")
Loading required package: miscTools
> 
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
>  
> 
> 
> u = (7 : 14) / 10
> M = 30
> 
> b = 5
> k = 3
> 
> #accuracy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
> 
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.13135 0.08330 0.05862 0.03820 0.02479 0.01346 0.01208 0.01208
F   0.14790 0.09530 0.06100 0.03900 0.02510 0.01630 0.01070 0.00710
QMC 0.33619 0.24442 0.16898 0.12915 0.09089 0.06776 0.05526 0.04411
Q   0.29380 0.20190 0.13200 0.08210 0.04860 0.02730 0.01460 0.00740
L   0.40641 0.30236 0.21187 0.14291 0.10155 0.06159 0.03429 0.02588
LR  0.37100 0.31000 0.26140 0.19170 0.14690 0.10470 0.00000 0.00000
NC  0.36690 0.30120 0.24680 0.17840 0.13280 0.09240 0.00000 0.00000
> 
> 
> b = 10
> k = 4
> 
> #accuracy normal
> A = generateRandomMatrix(rnorm, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00825 0.00222 0.00047 0.00009 0.00001 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20599 0.12055 0.06600 0.03440 0.01787 0.00906 0.00425 0.00198
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21525 0.12080 0.06130 0.02871 0.01311 0.00516 0.00215 0.00061
LR  0.21380 0.11930 0.06030 0.02780 0.01220 0.00460 0.00180 0.00060
NC  0.21230 0.11810 0.05960 0.02730 0.01190 0.00450 0.00170 0.00060
>   
> 
> #accuarcy unif
> A = generateRandomMatrix(runif, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00886 0.00270 0.00077 0.00011 0.00005 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20608 0.12206 0.06846 0.03604 0.01907 0.00972 0.00483 0.00252
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.20745 0.11460 0.05708 0.02629 0.01106 0.00438 0.00167 0.00052
LR  0.20860 0.11410 0.05810 0.02670 0.01100 0.00430 0.00150 0.00050
NC  0.20750 0.11340 0.05750 0.02640 0.01090 0.00420 0.00150 0.00050
>  
> 
> #accuarcy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00580 0.00145 0.00027 0.00002 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.19740 0.10944 0.05823 0.02871 0.01356 0.00630 0.00303 0.00125
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.23354 0.13154 0.06737 0.03092 0.01312 0.00487 0.00165 0.00046
LR  0.23870 0.13190 0.06570 0.03630 0.01890 0.00660 0.00330 0.00000
NC  0.23440 0.12940 0.06440 0.03480 0.01750 0.00620 0.00290 0.00000
>  
> #accuracy exp squared
> A = generateRandomMatrix(rexp2, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00127 0.00006 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.19619 0.10197 0.04836 0.01918 0.00633 0.00154 0.00023 0.00006
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.26513 0.15268 0.08147 0.03896 0.01632 0.00608 0.00206 0.00076
LR  0.24810 0.17240 0.09570 0.05760 0.02800 0.00010 0.00000 0.00000
NC  0.24240 0.16260 0.08910 0.05130 0.02440 0.00000 0.00000 0.00000
>  
> 
> #accuracy gamma5
> A = generateRandomMatrix(rgamma5, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00758 0.00209 0.00043 0.00006 0.00002 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20501 0.11823 0.06543 0.03455 0.01755 0.00821 0.00383 0.00182
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21291 0.11717 0.05987 0.02769 0.01158 0.00432 0.00158 0.00038
LR  0.21130 0.11880 0.06220 0.02740 0.01110 0.00440 0.00160 0.00060
NC  0.21000 0.11770 0.06130 0.02700 0.01090 0.00430 0.00150 0.00050
>  
> #accuracy gamma05
> A = generateRandomMatrix(rgamma05, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
         [,1]      [,2]       [,3]       [,4]       [,5]        [,6]
FMC 0.0086500 0.0029600 0.00084000 0.00039000 0.00017000 0.000050000
F   0.0076000 0.0020000 0.00050000 0.00010000 0.00000000 0.000000000
QMC 0.2034700 0.1188400 0.06640000 0.03565000 0.01801000 0.009390000
Q   0.1793000 0.0937000 0.04400000 0.01860000 0.00700000 0.002400000
L   0.2151143 0.1214924 0.06090122 0.02802056 0.01217024 0.004440089
LR  0.2147000 0.1261000 0.06160000 0.03020000 0.01360000 0.005700000
NC  0.2131000 0.1242000 0.06070000 0.02950000 0.01320000 0.005500000
           [,7]         [,8]
FMC 0.000000000 0.0000000000
F   0.000000000 0.0000000000
QMC 0.005040000 0.0027000000
Q   0.000700000 0.0002000000
L   0.001720034 0.0006700134
LR  0.002300000 0.0009000000
NC  0.002200000 0.0008000000
>  
> 
