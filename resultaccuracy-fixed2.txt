
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i486-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(warn=2, error=quote(dump.frames("accuracy-fixed", TRUE)))
> source("PowerFunctions-fixed.R")
Loading required package: miscTools
> 
> rexp2 = function(N) {
+   rexp(N) ^ 2
+ }
> 
> rgamma5 = function(N) {
+   rgamma(N, 5)
+ }
> 
> rgamma05 = function(N) {
+   rgamma(N, 0.5)
+ }
>  
> 
> 
> u = (7 : 14) / 10
> M = 30
> 
> b = 5
> k = 3
> 
> #accuracy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
> 
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.15741 0.09373 0.06448 0.02429 0.00000 0.00000 0.00000 0.00000
F   0.14790 0.09530 0.06100 0.03900 0.02510 0.01630 0.01070 0.00710
QMC 0.32407 0.26571 0.20514 0.14830 0.11206 0.08154 0.05676 0.03206
Q   0.29380 0.20190 0.13200 0.08210 0.04860 0.02730 0.01460 0.00740
L   0.39916 0.32987 0.23377 0.16288 0.12112 0.08428 0.05520 0.03253
LR  0.43150 0.31620 0.21040 0.17320 0.10480 0.09330 0.05510 0.03250
NC  0.41860 0.30640 0.20480 0.16380 0.09980 0.08400 0.04970 0.02910
> 
> 
> b = 10
> k = 4
> 
> #accuracy normal
> A = generateRandomMatrix(rnorm, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00841 0.00253 0.00058 0.00026 0.00008 0.00002 0.00002 0.00001
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20846 0.12236 0.06789 0.03617 0.01836 0.00927 0.00432 0.00229
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.21275 0.11777 0.05926 0.02717 0.01140 0.00424 0.00160 0.00052
LR  0.20980 0.11900 0.05850 0.02690 0.01100 0.00440 0.00150 0.00050
NC  0.20860 0.11790 0.05790 0.02650 0.01080 0.00430 0.00140 0.00040
>   
> 
> #accuarcy unif
> A = generateRandomMatrix(runif, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00900 0.00276 0.00073 0.00028 0.00007 0.00002 0.00001 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20520 0.12094 0.06731 0.03709 0.01937 0.00973 0.00509 0.00246
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.20666 0.11383 0.05730 0.02631 0.01074 0.00401 0.00131 0.00051
LR  0.20850 0.11340 0.05960 0.02680 0.01160 0.00430 0.00150 0.00050
NC  0.20740 0.11270 0.05890 0.02640 0.01140 0.00420 0.00150 0.00050
>  
> 
> #accuarcy exp
> A = generateRandomMatrix(rexp, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]   [,8]
FMC 0.00778 0.00264 0.00088 0.00024 0.00007 0.00004 0.00002 0.0000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.0000
QMC 0.20046 0.11396 0.06156 0.03137 0.01626 0.00845 0.00443 0.0024
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.0002
L   0.22763 0.12796 0.06353 0.02999 0.01260 0.00493 0.00180 0.0005
LR  0.21770 0.11770 0.06940 0.03010 0.01330 0.00460 0.00170 0.0006
NC  0.21580 0.11670 0.06770 0.02940 0.01290 0.00450 0.00160 0.0006
>  
> #accuracy exp squared
> A = generateRandomMatrix(rexp2, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: TailDistrMonteCarlo ... IntOnSphereMonteCarlo -> h -> delta -> Lambda -> maxNR -> maxNRCompute
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00080 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.16432 0.08062 0.03260 0.01310 0.00431 0.00104 0.00014 0.00000
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.31683 0.17979 0.09204 0.04215 0.01767 0.00675 0.00232 0.00071
LR  0.36950 0.36950 0.36950 0.36950 0.36950 0.36950 0.36950 0.36950
NC  0.33220 0.33220 0.33220 0.33220 0.33220 0.33220 0.33220 0.33220
>  
> 
> #accuracy gamma5
> A = generateRandomMatrix(rgamma5, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
       [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    [,8]
FMC 0.00488 0.00097 0.00017 0.00003 0.00000 0.00000 0.00000 0.00000
F   0.00760 0.00200 0.00050 0.00010 0.00000 0.00000 0.00000 0.00000
QMC 0.20727 0.11541 0.05952 0.02807 0.01265 0.00545 0.00206 0.00091
Q   0.17930 0.09370 0.04400 0.01860 0.00700 0.00240 0.00070 0.00020
L   0.23188 0.13011 0.06690 0.03086 0.01248 0.00456 0.00150 0.00039
LR  0.23150 0.13140 0.06530 0.03040 0.01320 0.00480 0.00170 0.00050
NC  0.22810 0.12890 0.06400 0.02960 0.01280 0.00460 0.00160 0.00050
>  
> #accuracy gamma05
> A = generateRandomMatrix(rgamma05, b, k)
> iterations = 100000 
> 
> Fstat = NULL
> Lstat = NULL
>  
>   for (i in 1 : iterations) {
+     B = t(apply(A, 1, sample, size = k))
+    xx = apply(B, 2, mean)
+ SST = b * sum(xx ^ 2) 
+ SSE = sum((B-matrix(xx,b,k,byrow=TRUE))^2)
+ Fstat = c(Fstat, (SST/ (k - 1)) / (SSE / ((k - 1) * (b - 1)) ))
+ Lstat = c(Lstat, Lambda(A, xx[-k])$max)
+    }
>  
> L = apply(outer(Lstat, u ^ 2 / 2, ">"), 2, mean)
> FMC = apply(outer(Fstat, b * u ^ 2, ">"), 2, mean)
> QMC = apply(outer(Fstat*(k-1), b * u ^ 2, ">"), 2, mean)
> Q = 1 - pchisq(b * u ^ 2, k - 1)
> F = 1 - pf(b * u ^ 2 , k-1, (k-1) * (b-1))
>  
> tplr = NULL
> tpnc = NULL
>   
> for (up in u) {
+   tt = TailDistrMonteCarlo(A, up, M)
+  tplr = c(tplr, tt$LR)
+  tpnc = c(tpnc, tt$NC)
+  }
Error in maxNRCompute(fn = logLikAttr, fnOrig = fn, gradOrig = grad, hessOrig = hess,  : 
  NA in Hessian (at the iteration start)
Calls: TailDistrMonteCarlo ... IntOnSphereMonteCarlo -> h -> delta -> Lambda -> maxNR -> maxNRCompute
> 
> rbind(FMC, F=round(F,4), QMC, Q=round(Q,4), L , LR=round(tplr,4), NC=round(tpnc,4))
Error in rbind(FMC, F = round(F, 4), QMC, Q = round(Q, 4), L, LR = round(tplr,  : 
  (converted from warning) number of columns of result is not a multiple of vector length (arg 6)
>  
> 
